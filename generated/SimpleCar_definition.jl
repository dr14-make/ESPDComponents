### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   SimpleCar(; name)

short SimpleCar component description
"""
@component function SimpleCar(; name)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters

  ### Variables

  ### Constants
  __constants = Any[]

  ### Components
  push!(__systems, @named idealrollingwheel = RotationalComponents.IdealRollingWheel(radius=0.14))
  push!(__systems, @named torquesource = RotationalComponents.TorqueSource())
  push!(__systems, @named mass = TranslationalComponents.Mass(L=2, m=100))
  push!(__systems, @named speedsensor = TranslationalComponents.SpeedSensor())
  push!(__systems, @named force = TranslationalComponents.Force())
  push!(__systems, @named constant0 = BlockComponents.Constant(k=100))
  push!(__systems, @named constant1 = BlockComponents.Constant(k=100))
  push!(__systems, @named fixed = RotationalComponents.Fixed())
  push!(__systems, @named fixed1 = TranslationalComponents.Fixed())

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, connect(torquesource.spline, idealrollingwheel.spline))
  push!(__eqs, connect(idealrollingwheel.flange, mass.flange_a))
  push!(__eqs, connect(mass.flange_b, speedsensor.flange))
  push!(__eqs, connect(constant0.y, torquesource.tau))
  push!(__eqs, connect(constant1.y, force.f))
  push!(__eqs, connect(torquesource.support, fixed.spline))
  push!(__eqs, connect(idealrollingwheel.support_r, fixed.spline))
  push!(__eqs, connect(force.flange_a, mass.flange_b))
  push!(__eqs, connect(fixed1.flange, force.flange_b))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export SimpleCar
