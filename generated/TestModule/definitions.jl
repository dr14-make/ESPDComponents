
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)


import BlockComponents
import DyadExampleComponents
import DyadInterface
import RotationalComponents
import TranslationalComponents
@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    (v(t)::Real), []
    (i(t)::Real), [connect = Flow]
  end
  return System(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    (T(t)::Real), []
    (Q(t)::Real), [connect = Flow]
  end
  return System(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    (s(t)::Real), []
    (f(t)::Real), [connect = Flow]
  end
  return System(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    (phi(t)::Real), []
    (tau(t)::Real), [connect = Flow]
  end
  return System(Equation[], t, vars, []; name)
end

include("Module_definition.jl")
include("TestComponent_definition.jl")