### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   DerivativeTest(; name, T)

short DerivativeTest component description

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `T`         |                          | --  |   0.01 |
"""
@component function DerivativeTest(; name, T=0.01)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (T::Real = T))

  ### Variables

  ### Constants
  __constants = Any[]

  ### Components
  push!(__systems, @named sine = BlockComponents.Sine(frequency=10, amplitude=1))
  push!(__systems, @named derivative = BlockComponents.Derivative(T=T))

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, connect(sine.y, derivative.u))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export DerivativeTest
