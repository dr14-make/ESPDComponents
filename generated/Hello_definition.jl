### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Hello(; name, T_inf, T0, h, A, m, c_p)

A simple lumped thermal model

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `T_inf`         | Ambient temperature                         | K  |   300 |
| `T0`         | Initial temperature                         | K  |   320 |
| `h`         | Convective heat transfer coefficient                         | W/(m2.K)  |   0.7 |
| `A`         | Surface area                         | m2  |   1 |
| `m`         | Mass of thermal capacitance                         | kg  |   0.1 |
| `c_p`         | Specific Heat                         | J/(kg.K)  |   1.2 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `T`         |                          | K  | 
"""
@component function Hello(; name, T_inf=300, T0=320, h=0.7, A=1, m=0.1, c_p=1.2)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (T_inf::Real = T_inf), [description = "Ambient temperature"])
  append!(__params, @parameters (T0::Real = T0), [description = "Initial temperature"])
  append!(__params, @parameters (h::Real = h), [description = "Convective heat transfer coefficient"])
  append!(__params, @parameters (A::Real = A), [description = "Surface area"])
  append!(__params, @parameters (m::Real = m), [description = "Mass of thermal capacitance"])
  append!(__params, @parameters (c_p::Real = c_p), [description = "Specific Heat"])

  ### Variables
  append!(__vars, @variables (T(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components

  ### Guesses

  ### Defaults
  __defaults[T] = (T0)

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  # Newton's law of cooling/heating
  push!(__eqs, m * c_p * ModelingToolkit.D_nounits(T) ~ h * A * (T_inf - T))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export Hello
