### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ActiveSuspension(; name, wheel_mass, wheel_stiffness, wheel_damping, car_mass, suspension_stiffness, suspension_damping, human_and_seat_mass, seat_stiffness, seat_damping, wheel_initial_position, suspension_initial_position, seat_initial_position, Kp, Ti, Td, Nd, On)

This model was copied from the DyadExampleComponents

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `wheel_mass`         |                          | kg  |   25 |
| `wheel_stiffness`         |                          | N/m  |   100 |
| `wheel_damping`         |                          | s-1  |   10000 |
| `car_mass`         |                          | kg  |   1000 |
| `suspension_stiffness`         |                          | N/m  |   10000 |
| `suspension_damping`         |                          | s-1  |   10 |
| `human_and_seat_mass`         |                          | kg  |   100 |
| `seat_stiffness`         |                          | N/m  |   1000 |
| `seat_damping`         |                          | s-1  |   1 |
| `wheel_initial_position`         |                          | m  |   0.5 |
| `suspension_initial_position`         |                          | m  |   1 |
| `seat_initial_position`         |                          | m  |   1.5 |
| `Kp`         |                          | --  |   20 |
| `Ti`         |                          | --  |   5 |
| `Td`         |                          | --  |   10 |
| `Nd`         |                          | --  |   10 |
| `On`         |                          | --  |   false |
"""
@component function ActiveSuspension(; name, wheel_mass=25, wheel_stiffness=100, wheel_damping=10000, car_mass=1000, suspension_stiffness=10000, suspension_damping=10, human_and_seat_mass=100, seat_stiffness=1000, seat_damping=1, wheel_initial_position=0.5, suspension_initial_position=1, seat_initial_position=1.5, Kp=20, Ti=5, Td=10, Nd=10, On=false)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (wheel_mass::Real = wheel_mass))
  append!(__params, @parameters (wheel_stiffness::Real = wheel_stiffness))
  append!(__params, @parameters (wheel_damping::Real = wheel_damping))
  append!(__params, @parameters (car_mass::Real = car_mass))
  append!(__params, @parameters (suspension_stiffness::Real = suspension_stiffness))
  append!(__params, @parameters (suspension_damping::Real = suspension_damping))
  append!(__params, @parameters (human_and_seat_mass::Real = human_and_seat_mass))
  append!(__params, @parameters (seat_stiffness::Real = seat_stiffness))
  append!(__params, @parameters (seat_damping::Real = seat_damping))
  append!(__params, @parameters (wheel_initial_position::Real = wheel_initial_position))
  append!(__params, @parameters (suspension_initial_position::Real = suspension_initial_position))
  append!(__params, @parameters (seat_initial_position::Real = seat_initial_position))
  append!(__params, @parameters (Kp::Real = Kp))
  append!(__params, @parameters (Ti::Real = Ti))
  append!(__params, @parameters (Td::Real = Td))
  append!(__params, @parameters (Nd::Real = Nd))
  append!(__params, @parameters (On::Bool = On))

  ### Variables

  ### Constants
  __constants = Any[]

  ### Components
  push!(__systems, @named wheel = DyadExampleComponents.MassSpringDamper(m=wheel_mass, d=wheel_damping, c=wheel_stiffness, g=-10, theta=pi / 2, s0=wheel_initial_position))
  push!(__systems, @named car_and_suspension = DyadExampleComponents.MassSpringDamper(m=car_mass, d=suspension_damping, c=suspension_stiffness, g=-10, theta=pi / 2, s0=suspension_initial_position))
  push!(__systems, @named seat = DyadExampleComponents.MassSpringDamper(m=human_and_seat_mass, d=seat_damping, c=seat_stiffness, g=-10, theta=pi / 2, s0=seat_initial_position))
  push!(__systems, @named road_data = DyadExampleComponents.RoadData())
  push!(__systems, @named road = DyadExampleComponents.SimplePosition())
  push!(__systems, @named force = TranslationalComponents.Force())
  push!(__systems, @named set_point = BlockComponents.Constant(k=1.5))
  push!(__systems, @named seat_pos = TranslationalComponents.PositionSensor())
  push!(__systems, @named gain = BlockComponents.Gain(k=Kp))
  push!(__systems, @named derivative = BlockComponents.Derivative(k=Td, T=max(Td / Nd, 1e-14)))
  push!(__systems, @named integrator = BlockComponents.Integrator(k=1 / Ti))
  push!(__systems, @named add = BlockComponents.Add(k1=-1))
  push!(__systems, @named add3 = BlockComponents.Add3())
  push!(__systems, @named pid_on = BlockComponents.Gain(k=ifelse(On, 1, 0)))

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, connect(road_data.y, road.s))
  push!(__eqs, connect(wheel.flange_sd, road.flange))
  push!(__eqs, connect(car_and_suspension.flange_sd, wheel.flange_m))
  push!(__eqs, connect(car_and_suspension.flange_m, seat.flange_sd, force.flange_a))
  push!(__eqs, connect(seat.flange_m, force.flange_b, seat_pos.flange))
  push!(__eqs, connect(seat_pos.s, add.u1))
  push!(__eqs, connect(set_point.y, add.u2))
  push!(__eqs, connect(derivative.y, add3.u1))
  push!(__eqs, connect(gain.y, add3.u2))
  push!(__eqs, connect(integrator.y, add3.u3))
  push!(__eqs, connect(add.y, gain.u, derivative.u, integrator.u))
  push!(__eqs, connect(pid_on.y, force.f))
  push!(__eqs, connect(add3.y, pid_on.u))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export ActiveSuspension
